% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/targbetween.R
\name{targbetween_alldyads}
\alias{targbetween_alldyads}
\title{Targeted Betweenness Centrality for Specified Source and Destination Vertices}
\usage{
targbetween_alldyads(
  network,
  source,
  destination,
  filename = NULL,
  directed = FALSE,
  update = 0
)
}
\arguments{
\item{network}{An \code{igraph} network graph}

\item{source}{A vector of one or more vertices in \code{network}}

\item{destination}{A vector of one or more vertices in \code{network}}

\item{filename}{A character value indicating the file location to output
results (default = \code{NULL})}

\item{directed}{A boolean value indicating whether the \code{network} should
be treated as directed (default = \code{FALSE})}

\item{update}{A numeric value indicating how many loop iterations should
elapse between progress updates (default = \code{0}, which suppresses
output)}
}
\value{
A data.frame with the results for targeted betweenness centrality
}
\description{
This function computes targeted betweenness centrality for one or more
sources and one or more destinations. The set of dyads to be evaluated
includes all possible pairs of source vertices and destination vertices from
the specified \code{source} and \code{destination} vectors.
}
\examples{
my_network <- igraph::erdos.renyi.game(20, 0.5, directed = FALSE)
single_source <- igraph::V(my_network)[1]
single_destination <- igraph::V(my_network)[20]
multiple_sources <- igraph::V(my_network)[1:5]
multiple_destinations <- igraph::V(my_network)[6:10]
results1 <- targbetween_alldyads(my_network, single_source,
  single_destination)
results2 <- targbetween_alldyads(my_network, single_source,
  multiple_destinations, directed=FALSE)
results3 <- targbetween_alldyads(my_network, multiple_sources,
  single_destination, directed=TRUE)
results4 <- targbetween_alldyads(my_network, multiple_sources,
  multiple_destinations, directed=FALSE, update=1000)
results4
#       vertices targeted_betweenness
#  [1,] "1"      "0.533333333333333" 
#  [2,] "2"      "0.866666666666667" 
#  [3,] "3"      "0.5"               
#  [4,] "4"      "0.291666666666667" 
#  [5,] "5"      "1.11666666666667"  
#  [6,] "6"      "1.86666666666667"  
#  [7,] "7"      "0.541666666666667" 
#  [8,] "8"      "0.291666666666667" 
#  [9,] "9"      "0"                 
# [10,] "10"     "1.36666666666667"  
# [11,] "11"     "0.991666666666667" 
# [12,] "12"     "2.03333333333333"  
# [13,] "13"     "0.366666666666667" 
# [14,] "14"     "0.458333333333333" 
# [15,] "15"     "1.15833333333333"  
# [16,] "16"     "0.75"              
# [17,] "17"     "0"                 
# [18,] "18"     "1.20833333333333"  
# [19,] "19"     "0.866666666666667" 
# [20,] "20"     "0.791666666666667" 
}
